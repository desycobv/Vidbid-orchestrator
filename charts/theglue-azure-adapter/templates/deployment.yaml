{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.draft }}
        app: {{ .Chart.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
{{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.image.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        volumeMounts:
          - mountPath: /usr/src/app/tmp
            name: tmp
        resources:
{{ toYaml .Values.resources | indent 12 }}
        envFrom:
          - configMapRef:
              name: {{ .Values.configMap.name }}
        env:
          - name: APPLICATION_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secret.name }}
                key: azure.application.secret
          - name: TENANT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secret.name }}
                key: azure.tenant.id
          - name: APPLICATION_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secret.name }}
                key: azure.application.id
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
      - name: tmp
        emptyDir: {}

  {{- end }}